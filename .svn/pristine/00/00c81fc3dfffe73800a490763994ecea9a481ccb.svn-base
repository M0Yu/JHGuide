package com.fanjie.activity.rightSlider;

import java.io.File;

import jhunplay.com.fanjie.tool.Msharepreference;
import jhunplay.com.fanjie.tool.Tool;
import jhunplay.com.fanjie.tool.Tool.onGetFinish;

import com.block.jhguide.R;
import com.fanjie.activity.rightSlider.Login;
import com.tencent.android.tpush.XGIOperateCallback;
import com.tencent.android.tpush.XGPushManager;

import jhunplay.com.fanjie.tool.Tool;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Bitmap.Config;
import android.graphics.PorterDuff.Mode;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnLongClickListener;
import android.view.Window;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.Toast;

public class Login extends Activity implements OnClickListener, onGetFinish,OnLongClickListener {

	private ImageButton my1button1;
	private Button my1button2;
	private Button my1button3;
	private EditText my1edit1;
	private EditText my1edit2;
	private ImageView my1image1;
	private String user;
	private String pass;
	private RelativeLayout layout;
	private Tool tool;
	private Msharepreference preferences;
	private String[] itens = new String[]{"本地图片", "手机拍照"};
	private static final String IMAGE_FILE_NAME = "faceImage.jpg";
	private static final int IMAGE_REQUEST_CODE = 0;
	private static final int CAMERA_REQUEST_CODE = 1;
	private static final int RESULT_REQUEST_CODE = 2;
	private File tempFile;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.log_in1);
		// layout = (RelativeLayout) this.findViewById(R.id.login);
		// Animation anim = AnimationUtils.loadAnimation(this,
		// R.anim.flip_horizontal_in);
		// layout.startAnimation(anim);
		tool = new Tool(this);
		preferences = new Msharepreference(this, "information");
		my1button1 = (ImageButton) findViewById(R.id.log_in1_imageButton1);
		my1button2 = (Button) findViewById(R.id.log_in1_button2);
		my1button3 = (Button) findViewById(R.id.log_in1_button3);
		my1edit1 = (EditText) findViewById(R.id.log_in1_editText1);
		my1edit2 = (EditText) findViewById(R.id.log_in1_editText2);
		my1image1 = (ImageView)findViewById(R.id.log_in1_imageView1);
		user = my1edit1.getText().toString();
		pass = my1edit2.getText().toString();
		my1button1.setOnClickListener(this);
		my1button2.setOnClickListener(this);
		my1button3.setOnClickListener(this);
		my1image1.setOnLongClickListener(this);
		my1button1.getBackground().setAlpha(10);
		my1button3.getBackground().setAlpha(10);

	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.log_in1_imageButton1:
			finish();
			overridePendingTransition(R.anim.flip_horizontal_in,
					R.anim.flip_horizontal_out);
			break;

		case R.id.log_in1_button2:
			String login_id = my1edit1.getText().toString().trim();
			String password = my1edit2.getText().toString().trim();
			log_in(login_id, password);
			break;

		case R.id.log_in1_button3:
			Intent intent = new Intent();
			intent.setClass(Login.this, Register.class);
			Login.this.startActivity(intent);
			overridePendingTransition(R.anim.slide_up_in, R.anim.slide_up_out);
			break;

		default:
			break;
		}
	}

	public void log_in(String login_id, String password) {
		/* �ж��˺��������Ƿ��Ӧ */

		tool.Login(login_id, password);

	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub
		if (keyCode == KeyEvent.KEYCODE_BACK) {
			finish();
			overridePendingTransition(R.anim.flip_horizontal_in,
					R.anim.flip_horizontal_out);
		}
		return true;
	}

	@Override
	public void onFinish() {
		// TODO Auto-generated method stub
		XGPushManager.registerPush(getApplicationContext(),
				new XGIOperateCallback() {

					@Override
					public void onFail(Object arg0, int arg1, String arg2) {
						// TODO Auto-generated method stub
						Toast.makeText(getApplicationContext(), "登入失败", 0).show();
					}

					@Override
					public void onSuccess(Object arg0, int arg1) {
						// TODO Auto-generated method stub
						Intent intent = new Intent();
						intent.setClass(Login.this, MyInformation.class);
						Login.this.startActivity(intent);
						finish();
						overridePendingTransition(R.anim.left_in, R.anim.left_out);
					}
			
		});


	}

	@Override
	public boolean onLongClick(View v) {
		// TODO Auto-generated method stub
		showDialog();
		return false;
	}
	
	
	
	private void showDialog(){
		   new AlertDialog.Builder(this).setTitle("设置头像").setItems(itens, new DialogInterface.OnClickListener() {
			
			@Override
			public void onClick(DialogInterface dialog, int which) {
				// TODO Auto-generated method stub
			switch (which) {
			case 0:
				Intent intentFromGallery = new Intent();
				intentFromGallery.setType("image/*");
				intentFromGallery.setAction(Intent.ACTION_GET_CONTENT);
				startActivityForResult(intentFromGallery, IMAGE_REQUEST_CODE);			
				break;
			case 1:
				Intent intentFromCapture = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
				if(Tool.hasSdcard()){
					tempFile = new File(Environment.getExternalStorageDirectory(),  
							IMAGE_FILE_NAME);  
		            // 从文件中创建uri  
		            Uri uri = Uri.fromFile(tempFile);  
		            intentFromCapture.putExtra(MediaStore.EXTRA_OUTPUT, uri);
				}
				startActivityForResult(intentFromCapture, CAMERA_REQUEST_CODE);
				break;
			default:
				break;
			}	
			}
		}).setNegativeButton("取消", new DialogInterface.OnClickListener() {
			
			@Override
			public void onClick(DialogInterface dialog, int which) {
				// TODO Auto-generated method stub
				dialog.dismiss();
			}
		}).show();
	   }
	
	
	
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		   if(resultCode != RESULT_CANCELED){
			   switch (requestCode) {
			case IMAGE_REQUEST_CODE:
				startPhotoZoom(data.getData());
				break;
			case CAMERA_REQUEST_CODE:
				if (Tool.hasSdcard()) {
					startPhotoZoom(Uri.fromFile(tempFile));
				} else {
					Toast.makeText(Login.this, "未找到存储卡，无法存储照片！",
							Toast.LENGTH_LONG).show();}
				break;
			case RESULT_REQUEST_CODE:
				if (data != null) {
					getImageToView(data);
				}
				break;

			default:
				break;
			}
		   }super.onActivityResult(requestCode, resultCode, data);
	   }
	
	
	
	public void startPhotoZoom(Uri uri) {

		Intent intent = new Intent("com.android.camera.action.CROP");
		intent.setDataAndType(uri, "image/*");
		// 设置裁剪
		intent.putExtra("crop", "true");
		// aspectX aspectY 是宽高的比例
		intent.putExtra("aspectX", 1);
		intent.putExtra("aspectY", 1);
		// outputX outputY 是裁剪图片宽高
		intent.putExtra("outputX", 320);
		intent.putExtra("outputY", 320);
		intent.putExtra("return-data", true);
		startActivityForResult(intent, 2);
	}
	
	
	
	private void getImageToView(Intent data){
		   Bundle extras = data.getExtras();
			if (extras != null) {
				Bitmap photo1 = extras.getParcelable("data");
				Bitmap photo2 = toRoundBitmap(photo1);
				Drawable drawable = new BitmapDrawable(photo2);
				my1image1.setImageDrawable(drawable);
			}
	   }
	
	
	
	public Bitmap toRoundBitmap(Bitmap bitmap) {
        int width = bitmap.getWidth();
        int height = bitmap.getHeight();
        float roundPx;
        float left,top,right,bottom,dst_left,dst_top,dst_right,dst_bottom;
        if (width <= height) {
                roundPx = width / 2;
                top = 0;
                bottom = width;
                left = 0;
                right = width;
                height = width;
                dst_left = 0;
                dst_top = 0;
                dst_right = width;
                dst_bottom = width;
        } else {
                roundPx = height / 2;
                float clip = (width - height) / 2;
                left = clip;
                right = width - clip;
                top = 0;
                bottom = height;
                width = height;
                dst_left = 0;
                dst_top = 0;
                dst_right = height;
                dst_bottom = height;
        }
          
        Bitmap output = Bitmap.createBitmap(width,
                        height, Config.ARGB_8888);
        Canvas canvas = new Canvas(output);
          
        final int color = 0xff424242;
        final Paint paint = new Paint();
        final Rect src = new Rect((int)left, (int)top, (int)right, (int)bottom);
        final Rect dst = new Rect((int)dst_left, (int)dst_top, (int)dst_right, (int)dst_bottom);
        final RectF rectF = new RectF(dst);

        paint.setAntiAlias(true);
          
        canvas.drawARGB(0, 0, 0, 0);
        paint.setColor(color);
        canvas.drawRoundRect(rectF, roundPx, roundPx, paint);

        paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));
        canvas.drawBitmap(bitmap, src, dst, paint);
        return output;
}

}
