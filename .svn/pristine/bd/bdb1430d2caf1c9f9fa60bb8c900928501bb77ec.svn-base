package com.fanjie.activity.thoseyear;

import java.io.File;
import java.util.ArrayList;

import org.json.JSONObject;

import jhunplay.com.block.tool.ActivitySplitAnimationUtil;
import jhunplay.com.fanjie.adapter.ImageShowAdapter;
import jhunplay.com.fanjie.ovrideLayout.ZoomImageView;
import jhunplay.com.fanjie.tool.Msharepreference;
import jhunplay.com.fanjie.tool.Tool;
import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.GridView;
import android.widget.PopupWindow;
import android.widget.Toast;

import com.block.jhguide.R;

public class ImageDetailsActivity extends Activity {

	private ZoomImageView zoomImageView;
	private LayoutInflater inflater;
	private View view;
	private ArrayList<String> mPhotoList = new ArrayList<String>();
	private GridView mGridView = null;
	private ImageShowAdapter mImagePathAdapter = null;
	private File PHOTO_DIR = null;
	private static final int CAMERA_WITH_DATA = 3023;
	/* 用来标识请求gallery的activity */
	private static final int PHOTO_PICKED_WITH_DATA = 3021;
	/* 用来标识请求裁剪图片后的activity */
	private static final int CAMERA_CROP_DATA = 3022;
	private File mCurrentPhotoFile;
	private String mFileName;
	private int selectIndex = 0;
	// private int camIndex = 0;
	private int disIdex = 0;
	private int godIndex = 1;
	private int scIndex = 2;
	private boolean flag = false;
	private PopupWindow mPopupWindow;
	private Msharepreference msharepreference;
	private String pic_id;
	private String store_id;
	private String pic_praise;
	private String pic_collection;
	
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.xml.image_details);
		mGridView = (GridView) findViewById(R.id.gridView1);
		zoomImageView = (ZoomImageView) findViewById(R.id.zoom_image_view);
		String imagePath = getIntent().getStringExtra("image_path");
		
		
		Bitmap bitmap = BitmapFactory.decodeFile(imagePath);
		zoomImageView.setImageBitmap(bitmap);
		
		
		msharepreference = new Msharepreference(this, "information");
		// mPhotoList.add(String.valueOf(R.drawable.cam_photo));
		Intent getIntent = getIntent();
		pic_id = getIntent.getStringExtra("pic_id");
		pic_praise = getIntent.getStringExtra("pic_praise");
		// pic_parise = null;
		// pic_parise = "我他妈已经赞了";
		// if (pic_parise == "null") {
		// if (pic_parise.isEmpty()) {
		// pic_parise = "";
		// }

		pic_collection = getIntent.getStringExtra("pic_collection");

		// pic_collection = null;
		// pic_collection = "我他妈已经收藏了";
		// if (pic_collection == "null") {
		// if (pic_collection.isEmpty()) {
		// pic_collection = "";
		// }

		store_id = pic_id;

		// mPhotoList.add(String.valueOf(R.drawable.cam_photo));
		mPhotoList.add(String.valueOf(R.drawable.comments));

		if (pic_praise.isEmpty() || pic_praise.equals("null") || pic_praise.equals("")) {

			mPhotoList.add(String.valueOf(R.drawable.point_button_before));

		} else {

			mPhotoList.add(String.valueOf(R.drawable.point_button_after));

		}

		if (pic_collection.isEmpty() || pic_collection.equals("null")
				|| pic_collection.equals("")) {

			mPhotoList.add(String.valueOf(R.drawable.collect_button_before));

		} else {

			mPhotoList.add(String.valueOf(R.drawable.collect_button_after));

		}

		mImagePathAdapter = new ImageShowAdapter(this, mPhotoList,
				ViewGroup.LayoutParams.MATCH_PARENT, 50);
		mGridView.setAdapter(mImagePathAdapter);
		// inflater = getLayoutInflater();
		// view = inflater.inflate(R.layout.choose_avatar, null);
		// String photo_dir = AbFileUtil.getImageDownFullDir();
		// if (AbStrUtil.isEmpty(photo_dir)) {
		// showToast("存储卡不存在");
		// } else {
		// PHOTO_DIR = new File(photo_dir);
		// }
		// Button albumButton = (Button) view.findViewById(R.id.choose_album);
		// Button camButton = (Button) view.findViewById(R.id.choose_cam);
		// Button cancelButton = (Button) view.findViewById(R.id.choose_cancel);

		// albumButton.setOnClickListener(new OnClickListener() {
		//
		// @Override
		// public void onClick(View v) {
		// removeDialog(AbConstant.DIALOGBOTTOM);
		// // 从相册中去获取
		// try {
		// Intent intent = new Intent(Intent.ACTION_GET_CONTENT, null);
		// intent.setType("image/*");
		// startActivityForResult(intent, PHOTO_PICKED_WITH_DATA);
		// } catch (ActivityNotFoundException e) {
		// showToast("没有找到照片");
		// }
		// }
		//
		// });
		//
		// // camButton.setOnClickListener(new OnClickListener() {
		// //
		// // @Override
		// // public void onClick(View v) {
		// // removeDialog(AbConstant.DIALOGBOTTOM);
		// // doPickPhotoAction();
		// // }
		// //
		// // });
		//
		// cancelButton.setOnClickListener(new OnClickListener() {
		//
		// @Override
		// public void onClick(View v) {
		// removeDialog(AbConstant.DIALOGBOTTOM);
		// }
		//
		// });

		mGridView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view1,
					int position, long id) {
				selectIndex = position;
				/*
				 * if (selectIndex == camIndex) { // showDialog(1, view);
				 * 
				 * } else
				 */if (selectIndex == disIdex) { // 如果点击的是“评论”按钮
					Intent it = new Intent(ImageDetailsActivity.this,
							commentary.class);
					it.putExtra("pic_id", pic_id);
					ActivitySplitAnimationUtil.startActivity(
							ImageDetailsActivity.this, it);

				} else if (selectIndex == godIndex) { // 如果点击的是“点赞”按钮
					if (pic_praise.isEmpty() || pic_praise.equals("")
							|| pic_praise.equals("null")) { // 如果该图未被赞

						JSONObject jsonObject = Tool.getJSONObject(2,
								"store_id", store_id, "type", "1", "user_id",
								msharepreference.getStringProperty("user_id"),
								"ids", "praise_store");
						Praise praise = new Praise();
						praise.execute(jsonObject);
					} else { // 如果该图已被赞

						JSONObject jsonObject = Tool.getJSONObject(2, "type",
								"1", "store_id", store_id, "user_id",
								msharepreference.getStringProperty("user_id"),
								"ids", "delete_parise");
						Parise_Cancel praise_cancel = new Parise_Cancel();
						praise_cancel.execute(jsonObject);
					}

				} else if (selectIndex == scIndex) { // 如果点击的是“收藏”按钮
					if (pic_collection.isEmpty() || pic_collection.equals("null")
							|| pic_collection.equals("")) { // 如果该图未被收藏

						JSONObject jsonObject = Tool.getJSONObject(2,
								"store_id", store_id, "type", "1", "user_id",
								msharepreference.getStringProperty("user_id"),
								"ids", "collection_store");
						Collection collection = new Collection();
						collection.execute(jsonObject);
					} else { // 如果该图已被收藏

						JSONObject jsonObject = Tool.getJSONObject(2,
								"store_id", store_id, "type", "1", "user_id",
								msharepreference.getStringProperty("user_id"),
								"ids", "delete_collection");
						Collection_Cancel collection_cancel = new Collection_Cancel();
						collection_cancel.execute(jsonObject);
					}
				} else {
					for (int i = 0; i < mImagePathAdapter.getCount(); i++) {
						ImageShowAdapter.ViewHolder mViewHolder = (ImageShowAdapter.ViewHolder) mGridView
								.getChildAt(i).getTag();
						if (mViewHolder != null) {
							mViewHolder.mImageView2.setBackgroundDrawable(null);
						}
					}

					ImageShowAdapter.ViewHolder mViewHolder = (ImageShowAdapter.ViewHolder) view1
							.getTag();
					mViewHolder.mImageView2
							.setBackgroundResource(R.drawable.photo_select);
				}
			}

		});

	}

	private void showToast(String str) {
		Toast.makeText(ImageDetailsActivity.this, str, 1).show();
	}

	// private void doPickPhotoAction() {
	// String status = Environment.getExternalStorageState();
	// // 判断是否有SD卡,如果有sd卡存入sd卡在说，没有sd卡直接转换为图片
	// if (status.equals(Environment.MEDIA_MOUNTED)) {
	// doTakePhoto();
	// } else {
	// showToast("没有可用的存储卡");
	// }
	// }

	// protected void doTakePhoto() {
	// try {
	// mFileName = System.currentTimeMillis() + ".jpg";
	// mCurrentPhotoFile = new File(PHOTO_DIR, mFileName);
	// Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE, null);
	// intent.putExtra(MediaStore.EXTRA_OUTPUT,
	// Uri.fromFile(mCurrentPhotoFile));
	// startActivityForResult(intent, CAMERA_WITH_DATA);
	// } catch (Exception e) {
	// showToast("未找到系统相机程序");
	// }
	// }
	//
	// private View mBottomDialogView = null;
	// private Dialog mBottomDialog;
	// /** 屏幕宽度. */
	// public int diaplayWidth = 320;
	//
	// /** 屏幕高度. */
	// public int diaplayHeight = 480;
	// private int dialogPadding = 40;
	// private Dialog mCenterDialog;
	// private Dialog mTopDialog;
	// private View mTopDialogView = null;
	// private View mCenterDialogView = null;
	// private String TAG = Activity.class.getSimpleName();
	//
	// public void showDialog(int id, View view) {
	//
	// if (id == AbConstant.DIALOGBOTTOM) {
	// mBottomDialogView = view;
	// if (mBottomDialog == null) {
	// mBottomDialog = new Dialog(ImageDetailsActivity.this);
	// setDialogLayoutParams(mBottomDialog, dialogPadding,
	// Gravity.BOTTOM);// BOTTOM
	// }
	// mBottomDialog.setContentView(mBottomDialogView, new LayoutParams(
	// diaplayWidth - dialogPadding, LayoutParams.WRAP_CONTENT));// WRAP_CONTENT
	// showDialog(id);
	// } else if (id == AbConstant.DIALOGCENTER) {
	// mCenterDialogView = view;
	// if (mCenterDialog == null) {
	// mCenterDialog = new Dialog(this);
	// setDialogLayoutParams(mCenterDialog, dialogPadding,
	// Gravity.BOTTOM);
	// }
	// mCenterDialog.setContentView(mCenterDialogView, new LayoutParams(
	// LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));// diaplayWidth
	// // -
	// // dialogPadding
	// showDialog(id);
	// } else if (id == AbConstant.DIALOGTOP) {
	// mTopDialogView = view;
	// if (mTopDialog == null) {
	// mTopDialog = new Dialog(this);
	// setDialogLayoutParams(mTopDialog, dialogPadding, Gravity.TOP);
	// }
	// mTopDialog.setContentView(mTopDialogView, new LayoutParams(
	// diaplayWidth - dialogPadding, LayoutParams.WRAP_CONTENT));
	// showDialog(id);
	// } else {
	// Log.i(TAG, "Dialog的ID传错了，请参考AbConstant类定义");
	// }
	// }
	//
	// private void setDialogLayoutParams(Dialog dialog, int dialogPadding,
	// int gravity) {
	// dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
	// Window window = dialog.getWindow();
	// WindowManager.LayoutParams lp = window.getAttributes();
	// // 此处可以设置dialog显示的位置
	// window.setGravity(gravity);
	// // 设置宽度
	// lp.width = diaplayWidth - dialogPadding;
	// lp.type = WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;
	// // 背景透明
	// // lp.screenBrightness = 0.2f;
	// lp.alpha = 0.8f;
	// lp.dimAmount = 0f;
	// window.setAttributes(lp);
	// // 添加动画
	// window.setWindowAnimations(android.R.style.Animation_Dialog);
	// // 设置点击屏幕Dialog不消失
	// dialog.setCanceledOnTouchOutside(false);
	//
	// }
	//
	// public String getPath(Uri uri) {
	// if (AbStrUtil.isEmpty(uri.getAuthority())) {
	// return null;
	// }
	// String[] projection = { MediaStore.Images.Media.DATA };
	// Cursor cursor = managedQuery(uri, projection, null, null, null);
	// int column_index = cursor
	// .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
	// cursor.moveToFirst();
	// String path = cursor.getString(column_index);
	// return path;
	// }
	//
	// @Override
	// protected Dialog onCreateDialog(int id) {
	// // closeMonitor();
	// Dialog dialog = null;
	// switch (id) {
	// case AbConstant.DIALOGBOTTOM:
	// if (mBottomDialog == null) {
	// Log.i(TAG, "Dialog方法调用错误,请调用showDialog(int id,View view)!");
	// }
	// return mBottomDialog;
	// case AbConstant.DIALOGCENTER:
	// if (mCenterDialog == null) {
	// Log.i(TAG, "Dialog方法调用错误,请调用showDialog(int id,View view)!");
	// }
	// return mCenterDialog;
	// case AbConstant.DIALOGTOP:
	// if (mTopDialog == null) {
	// Log.i(TAG, "Dialog方法调用错误,请调用showDialog(int id,View view)!");
	// }
	// return mTopDialog;
	// default:
	// break;
	// }
	// return dialog;
	// }
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub
		if (keyCode == KeyEvent.KEYCODE_BACK) {
			finish();
			overridePendingTransition(R.anim.appear_top_left_in,
					R.anim.disappear_bottom_right_out);

		}
		return true;
	}

	public class Praise extends AsyncTask<JSONObject, Integer, String> {

		@Override
		protected String doInBackground(JSONObject... params) {
			// TODO Auto-generated method stub
			String result = Tool.registPost(params[0]);
			return result;
		}

		@Override
		protected void onPostExecute(String result) {
			// TODO Auto-generated method stub
			if (result.contains("执行成功")) {
				mPhotoList.remove(1);
				mPhotoList
						.add(1, String.valueOf(R.drawable.point_button_after));
				mImagePathAdapter.notifyDataSetChanged();
				pic_praise = "已赞";
				Toast.makeText(ImageDetailsActivity.this, "点赞+1",
						Toast.LENGTH_SHORT).show();
			} else {
				Toast.makeText(ImageDetailsActivity.this, "点赞失败", 0).show();
			}
			super.onPostExecute(result);
		}
	}

	public class Parise_Cancel extends AsyncTask<JSONObject, Integer, String> {

		@Override
		protected String doInBackground(JSONObject... params) {
			// TODO Auto-generated method stub
			String result = Tool.registPost(params[0]);
			return result;
		}

		@Override
		protected void onPostExecute(String result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);

			if (result.contains("执行成功")) {
				mPhotoList.remove(1);
				mPhotoList.add(1,
						String.valueOf(R.drawable.point_button_before));
				mImagePathAdapter.notifyDataSetChanged();
				
				pic_praise = "";
			
				
				Toast.makeText(ImageDetailsActivity.this, "取消点赞",
						Toast.LENGTH_SHORT).show();
			} else {
				Toast.makeText(ImageDetailsActivity.this, "取消点赞失败",
						Toast.LENGTH_SHORT).show();
			}
		}

	}

	public class Collection extends AsyncTask<JSONObject, Integer, String> {

		@Override
		protected String doInBackground(JSONObject... params) {
			// TODO Auto-generated method stub
			String result = Tool.registPost(params[0]);
			return result;
		}

		@Override
		protected void onPostExecute(String result) {
			// TODO Auto-generated method stub
			// super.onPostExecute(result);
			// try {
			// String success = (String) new JSONObject(result).get("msg");
			if (result.contains("执行成功")) {
				mPhotoList.remove(2);
				mPhotoList.add(2,
						String.valueOf(R.drawable.collect_button_after));
				mImagePathAdapter.notifyDataSetChanged();
				pic_collection = "已收藏";
				Toast.makeText(ImageDetailsActivity.this, "已收藏",
						Toast.LENGTH_SHORT).show();
			} else {
				Toast.makeText(ImageDetailsActivity.this, "收藏失败",
						Toast.LENGTH_SHORT).show();
			}
			// } catch (JSONException e) {
			// // TODO Auto-generated catch block
			// e.printStackTrace();
			// }
		}
	}

	public class Collection_Cancel extends
			AsyncTask<JSONObject, Integer, String> {

		@Override
		protected String doInBackground(JSONObject... params) {
			// TODO Auto-generated method stub
			String result = Tool.registPost(params[0]);
			return result;
		}

		@Override
		protected void onPostExecute(String result) {
			// TODO Auto-generated method stub
			// super.onPostExecute(result);
			// try {
			// String success = (String) new JSONObject(result).get("msg");
			if (result.contains("执行成功")) {
				mPhotoList.remove(2);
				mPhotoList.add(2,
						String.valueOf(R.drawable.collect_button_before));
				mImagePathAdapter.notifyDataSetChanged();
				pic_collection = "";
				Toast.makeText(ImageDetailsActivity.this, "取消收藏",
						Toast.LENGTH_SHORT).show();
			} else {
				Toast.makeText(ImageDetailsActivity.this, "取消收藏失败",
						Toast.LENGTH_SHORT).show();
			}
			// } catch (JSONException e) {
			// // TODO Auto-generated catch block
			// e.printStackTrace();
			// }
		}

	}
}
